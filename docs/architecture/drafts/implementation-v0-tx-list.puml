@startuml
skinparam nodesep 10
skinparam ranksep 10
skinparam swimlane {
  BorderThickness 2
  TitleFontColor black
  TitleFontSize 20
  width 30
}

|FinTech with OpenBankingGw API|
:{{
database "Dynamic KB\n(i.e. consent id)" as DKB
component "FinTech KB adapter" as FKBA
DKB ==> FKBA
}};
-> Read transactions - call\n**GET /transactions/{bankId}** with consent ID;
|#AntiqueWhite|TPP with OpenBankingGw Impl|
:Check consent is valid;
:{{
database "Static KB\n(i.e. bank profile)" as SKB
database "Dynamic KB\n(i.e. Client billing address)" as DKB
component "<size:30><&spreadsheet></size>Request context knowledge" as knowledge
DKB ==> knowledge
SKB ==> knowledge
}};
:{{
component "<size:30><&cog></size> Request validation engine\n(mock that validates if\nall params are present)" as mockEngine
component "<size:30><&fork></size>ASPSP mock endpoints with\nrequest definition" as ASPSPMock
mockEngine <=left=> ASPSPMock : Mock requests
}};
|BPMN Engine inside TPP|
:{{
skinparam nodesep 10
skinparam ranksep 10
header
<font color=red>Same flow as below (Transaction list)</font>
endheader
AIS -> "(MOCK) ASPSP" ++ : List transactions
return Transaction list
}};
|TPP with OpenBankingGw Impl|
if (<size:14>Not all required parameters</size>\n<size:14>are present?</size>) then (YES)
|FinTech with OpenBankingGw API|
:Handle not all parameters are available;
stop
else (NO - ALL PRESENT)
|TPP with OpenBankingGw Impl|
:{{
component "<size:30><&cog></size>Request performing engine (<b><&cog>RPE</b>)" as engine
}};
endif
|#AntiqueWhite|BPMN Engine inside TPP|
:{{
skinparam nodesep 10
skinparam ranksep 10
header
<font color=red>Transaction list</font>
endheader
AIS -> ASPSP ++ : List transactions
return Transaction list
}};
-> Call sequence to list transactions on behalf of <b>TPP</b>;
|ASPSP|
|ASPSP|
:List transactions with consent ID;
note right
  Generated by <&cog>RPE
end note
|TPP with OpenBankingGw Impl|
:List of transactions;
|FinTech with OpenBankingGw API|
:List of transactions;
stop
@enduml